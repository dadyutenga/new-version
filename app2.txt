import streamlit as st
import os
from mistralai import Mistral
from mistralai.constants import DEFAULT_MAX_TOKENS
from dotenv import load_dotenv
from PIL import Image
import base64
from io import BytesIO

# Load environment variables
load_dotenv()

# Mistral AI models
mistral_models = ["codestral-latest"]

# Utility functions
def get_image_base64(image_raw):
    buffered = BytesIO()
    image_raw.save(buffered, format=image_raw.format)
    img_byte = buffered.getvalue()
    return base64.b64encode(img_byte).decode('utf-8')

def messages_to_mistral(messages):
    mistral_messages = []
    for message in messages:
        mistral_message = {
            "role": message["role"],
            "content": ""
        }
        for content in message["content"]:
            if content["type"] == "text":
                mistral_message["content"] += content["text"] + "\n"
            elif content["type"] == "image_url":
                mistral_message["content"] += f"[Image uploaded]\n"
            elif content["type"] == "file":
                mistral_message["content"] += f"[File uploaded: {content['file_name']}]\n"
        mistral_messages.append(mistral_message)
    return mistral_messages

def stream_mistral_response(client, model, messages, temperature):
    response_message = ""
    mistral_messages = messages_to_mistral(messages)
    
    for response in client.chat.complete(
        model=model,
        messages=mistral_messages,
        temperature=temperature,
        max_tokens=DEFAULT_MAX_TOKENS,
        stream=True,
    ):
        chunk_text = response.choices[0].message.content
        response_message += chunk_text
        yield chunk_text
    
    st.session_state.messages.append({
        "role": "assistant", 
        "content": [{"type": "text", "text": response_message}]
    })

def main():
    # Page config
    st.set_page_config(
        page_title="Mistral AI Chatbot",
        page_icon="ü§ñ",
        layout="centered",
        initial_sidebar_state="expanded",
    )

    # Header
    st.header("ü§ñ Mistral AI Chatbot with Codestral Model")

    # Sidebar
    with st.sidebar:
        st.subheader("Configuration")
        mistral_api_key = st.text_input(
            "Enter your Mistral AI API Key",
            value=os.getenv("MISTRAL_API_KEY", ""),
            type="password"
        )

        model = st.selectbox("Select a model:", mistral_models, index=0)
        
        with st.expander("Model parameters"):
            temperature = st.slider("Temperature", min_value=0.0, max_value=2.0, value=0.7, step=0.1)

        if st.button("üóëÔ∏è Reset conversation"):
            st.session_state.messages = []
            st.experimental_rerun()

    # Main chat interface
    if not mistral_api_key:
        st.warning("Please enter your Mistral AI API Key in the sidebar to continue.")
        st.stop()

    if "messages" not in st.session_state:
        st.session_state.messages = []

    # Display chat messages
    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            for content in message["content"]:
                if content["type"] == "text":
                    st.write(content["text"])
                elif content["type"] == "image_url":
                    st.image(content["image_url"]["url"])
                elif content["type"] == "file":
                    st.text(f"File: {content['file_name']} ({content['file_type']})")
                    with st.expander("View file content"):
                        st.code(content['file_content'], language=content['file_type'].split('/')[-1])

    # File uploader
    uploaded_file = st.file_uploader("Upload a file (optional)", type=["txt", "py", "json", "csv"])
    if uploaded_file:
        file_content = uploaded_file.getvalue().decode("utf-8")
        st.session_state.messages.append({
            "role": "user", 
            "content": [{
                "type": "file",
                "file_name": uploaded_file.name,
                "file_type": uploaded_file.type,
                "file_content": file_content
            }]
        })
        st.experimental_rerun()

    # Image uploader
    uploaded_image = st.file_uploader("Upload an image (optional)", type=["png", "jpg", "jpeg"])
    if uploaded_image:
        image = Image.open(uploaded_image)
        img_base64 = get_image_base64(image)
        st.session_state.messages.append({
            "role": "user", 
            "content": [{
                "type": "image_url",
                "image_url": {"url": f"data:image/jpeg;base64,{img_base64}"}
            }]
        })
        st.experimental_rerun()

    # Chat input
    if prompt := st.chat_input("Ask me anything..."):
        st.session_state.messages.append({
            "role": "user", 
            "content": [{"type": "text", "text": prompt}]
        })
        st.chat_message("user").write(prompt)

        # Generate response
        client = Mistral(api_key=mistral_api_key)
        with st.chat_message("assistant"):
            try:
                st.write_stream(
                    stream_mistral_response(
                        client=client,
                        model=model,
                        messages=st.session_state.messages,
                        temperature=temperature
                    )
                )
            except Exception as e:
                st.error(f"An error occurred: {str(e)}")

if __name__ == "__main__":
    main()